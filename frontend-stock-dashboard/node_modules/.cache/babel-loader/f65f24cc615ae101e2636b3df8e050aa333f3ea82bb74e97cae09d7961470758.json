{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thega\\\\OneDrive\\\\Desktop\\\\Coding Projects\\\\Real-Time-Stock-Dashboard\\\\frontend-stock-dashboard\\\\src\\\\components\\\\StockLineChart.tsx\";\nimport React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale);\nconst StockLineChart = props => {\n  const chartData = {\n    labels: props.data.map(entry => entry.timestamp),\n    // Array of dates\n    datasets: [{\n      label: \"Stock Prices\",\n      data: props.data.map(entry => new Date(entry.price + \"Z\")),\n      // Array of stock prices\n      borderColor: \"rgba(75,192,192,1)\",\n      borderWidth: 2,\n      pointRadius: 0\n    }]\n  };\n  const options = {};\n  return /*#__PURE__*/_jsxDEV(Line, {\n    data: chartData,\n    options: options\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 10\n  }, this);\n};\n_c = StockLineChart;\nexport default StockLineChart;\nvar _c;\n$RefreshReg$(_c, \"StockLineChart\");","map":{"version":3,"names":["React","Line","Chart","ChartJS","CategoryScale","LinearScale","jsxDEV","_jsxDEV","register","StockLineChart","props","chartData","labels","data","map","entry","timestamp","datasets","label","Date","price","borderColor","borderWidth","pointRadius","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/thega/OneDrive/Desktop/Coding Projects/Real-Time-Stock-Dashboard/frontend-stock-dashboard/src/components/StockLineChart.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Chart as ChartJS, CategoryScale, LinearScale } from \"chart.js\";\r\n\r\nChartJS.register(CategoryScale, LinearScale);\r\n\r\nconst StockLineChart = (props: { data: any }) => {\r\n  const chartData = {\r\n    labels: props.data.map((entry: any) => entry.timestamp), // Array of dates\r\n    datasets: [\r\n      {\r\n        label: \"Stock Prices\",\r\n        data: props.data.map((entry: any) => new Date(entry.price + \"Z\")), // Array of stock prices\r\n        borderColor: \"rgba(75,192,192,1)\",\r\n        borderWidth: 2,\r\n        pointRadius: 0,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options: any = {};\r\n\r\n  return <Line data={chartData} options={options} />;\r\n};\r\n\r\nexport default StockLineChart;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,KAAK,IAAIC,OAAO,EAAEC,aAAa,EAAEC,WAAW,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExEJ,OAAO,CAACK,QAAQ,CAACJ,aAAa,EAAEC,WAAW,CAAC;AAE5C,MAAMI,cAAc,GAAIC,KAAoB,IAAK;EAC/C,MAAMC,SAAS,GAAG;IAChBC,MAAM,EAAEF,KAAK,CAACG,IAAI,CAACC,GAAG,CAAEC,KAAU,IAAKA,KAAK,CAACC,SAAS,CAAC;IAAE;IACzDC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,cAAc;MACrBL,IAAI,EAAEH,KAAK,CAACG,IAAI,CAACC,GAAG,CAAEC,KAAU,IAAK,IAAII,IAAI,CAACJ,KAAK,CAACK,KAAK,GAAG,GAAG,CAAC,CAAC;MAAE;MACnEC,WAAW,EAAE,oBAAoB;MACjCC,WAAW,EAAE,CAAC;MACdC,WAAW,EAAE;IACf,CAAC;EAEL,CAAC;EAED,MAAMC,OAAY,GAAG,CAAC,CAAC;EAEvB,oBAAOjB,OAAA,CAACN,IAAI;IAACY,IAAI,EAAEF,SAAU;IAACa,OAAO,EAAEA;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACpD,CAAC;AAACC,EAAA,GAjBIpB,cAAc;AAmBpB,eAAeA,cAAc;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}